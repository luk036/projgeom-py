mod ck_plane;
# mod hyperbolic;
# mod elliptic;
mod pg_object;
mod pg_plane;
mod hyp_object;

use crate::ck_plane::*;
use crate::pg_plane::*;

#[cfg(test)]
mod tests:
    use crate::pg_plane::ProjectivePlanePrimitive;
    use crate::pg_plane::{check_axiom, coincident};

    #[derive(Debug, PartialEq, Eq, Clone, Copy)]
    struct PArch {}

    #[derive(Debug, PartialEq, Eq, Clone, Copy)]
    struct LArch {}

    impl PArch:

        def __init__(self):
            Self {}



    impl LArch:

        def __init__(self):
            Self {}



    impl ProjectivePlanePrimitive<LArch> for PArch:

        def incident(self, rhs: &LArch) -> bool:
            true


        def meet(self, rhs: &Self) -> LArch:
            LArch()



    # impl PartialEq for LArch:
    #     def eq(self, rhs: &Self) -> bool:
    #         false
    #
    # }
    # impl Eq for LArch {}

    impl ProjectivePlanePrimitive<PArch> for LArch:

        def incident(self, rhs: &PArch) -> bool:
            true


        def meet(self, rhs: &Self) -> PArch:
            PArch()



    #[test]
    def it_works():
        let pt_p = PArch();
        let pt_q = PArch();
        let pt_r = PArch();
        let ln_l = &LArch();
        println!("{}", pt_p == pt_q);
        println!("{}", pt_p.incident(ln_l));
        println!("{}", coincident(&pt_p, &pt_q, &pt_r));
        check_axiom(&pt_p, &pt_q, &ln_l);
